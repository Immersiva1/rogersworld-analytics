{"version":3,"file":"analytics.es.js","sources":["../src/recorder.ts","../src/context.ts","../src/recorders/app.ts","../src/providers/tag-manager.ts","../src/providers/segment.ts","../src/index.ts"],"sourcesContent":["import { EventContext, mergeContext } from './context';\nimport { AnalyticsProvider } from './provider';\n\nexport interface Recorder {\n  [key: string]: RecorderMethod | Recorder;\n}\n\nexport interface RecorderMethod {\n  (context?: EventContext): void;\n  recordingName: string | string[];\n  requiredContext: (keyof EventContext)[];\n  optionalContext: (keyof EventContext)[];\n}\n\nexport const createRecorderHelpers = (options: {\n  prefix: string | string[];\n  provider: AnalyticsProvider;\n  stickyContext?: EventContext;\n}) => {\n  const {\n    prefix,\n    provider: { trackPageView, trackEvent },\n    stickyContext = {},\n  } = options;\n\n  return {\n    saveContext: (sticky: EventContext) => {\n      return Object.assign(stickyContext, sticky);\n    },\n\n    Page: createRecorderMethodFactory({\n      prefix,\n      stickyContext,\n      track: trackPageView,\n    }),\n\n    Event: createRecorderMethodFactory({\n      prefix,\n      stickyContext,\n      track: trackEvent,\n    }),\n  };\n};\n\nexport const createRecorderMethodFactory = (options: {\n  prefix?: string | string[];\n  track: (nameParts: string | string[], context?: EventContext) => any;\n  stickyContext: EventContext;\n}) => {\n  const { prefix = [], track, stickyContext } = options;\n\n  return (options: {\n    name: string | string[];\n    requiredContext?: (keyof EventContext)[];\n    optionalContext?: (keyof EventContext)[];\n  }): RecorderMethod => {\n    const { name, requiredContext = [], optionalContext = [] } = options;\n    const prefixedName = [prefix, name].flat();\n\n    const method: RecorderMethod = Object.assign(\n      (newContext = {}) => {\n        const context = mergeContext(\n          stickyContext,\n          newContext,\n          requiredContext,\n          optionalContext\n        );\n\n        track(prefixedName, context);\n      },\n      {\n        recordingName: prefixedName,\n        requiredContext,\n        optionalContext,\n      }\n    );\n\n    return method;\n  };\n};\n","export interface PageViewContext {}\n\nexport interface EventContext {\n  userId?: string;\n  userEmail?: string;\n  userName?: string;\n  roomId?: string;\n  deviceId?: string;\n  episodeId?: string;\n  sceneId?: string;\n  playerId?: string;\n  playerAge?: number;\n  videoId?: string;\n  answer?: string;\n  timestamp?: number;\n  duration?: number;\n  asGroup?: boolean;\n  sceneIndex?: number;\n  scenesRemaining?: number;\n  sceneProgress?: number;\n}\n\nexport const mergeContext = (\n  stickyContext: EventContext,\n  newContext: EventContext = {},\n  requiredKeys: (keyof EventContext)[] = [],\n  optionalKeys: (keyof EventContext)[] = []\n) => {\n  const mergedContext: EventContext = {};\n\n  requiredKeys.forEach((key) => {\n    const value = newContext[key] || stickyContext[key];\n\n    if (value === undefined) {\n      throw new Error('Required context missing: ' + key);\n    }\n\n    (mergedContext[key] as any) = value;\n  });\n\n  optionalKeys.forEach((key) => {\n    (mergedContext[key] as any) = newContext[key] || stickyContext[key];\n  });\n\n  return mergedContext;\n};\n","import { EventContext } from '../context';\nimport { AnalyticsProvider } from '../provider';\nimport { createRecorderHelpers, Recorder } from '../recorder';\n\nconst userInfo: (keyof EventContext)[] = ['userId', 'userEmail', 'userName'];\n\nexport const createAppAnalyticsRecorder = (provider: AnalyticsProvider) => {\n  const { Page, Event, saveContext } = createRecorderHelpers({\n    provider,\n    prefix: 'Web App',\n  });\n\n  return {\n    saveContext,\n\n    pages: {\n      home: Page({\n        name: 'Home',\n      }),\n      auth: Page({\n        name: 'Auth',\n      }),\n      payment: Page({\n        name: 'Payment',\n        requiredContext: userInfo,\n      }),\n    },\n\n    events: {\n      auth: {\n        signedUp: Event({\n          name: ['Auth', 'Signed Up'],\n          requiredContext: userInfo,\n        }),\n        loggedIn: Event({\n          name: ['Auth', 'Logged In'],\n          requiredContext: userInfo,\n        }),\n        loggedOut: Event({\n          name: ['Auth', 'Logged Out'],\n          requiredContext: userInfo,\n        }),\n        canceled: Event({\n          name: ['Auth', 'Canceled'],\n        }),\n        required: Event({\n          name: ['Auth', 'Required'],\n          requiredContext: ['episodeId'],\n        }),\n      },\n\n      payment: {\n        required: Event({\n          name: ['Payment', 'Required'],\n          requiredContext: userInfo,\n        }),\n        completed: Event({\n          name: ['Payment', 'Completed'],\n          requiredContext: userInfo,\n        }),\n      },\n\n      episode: {\n        detailsViewed: Event({\n          name: ['Episode', 'Details Viewed'],\n          requiredContext: ['episodeId'],\n          optionalContext: userInfo,\n        }),\n      },\n\n      device: {\n        connected: Event({\n          name: ['Device', 'Connected'],\n          requiredContext: ['roomId', 'episodeId', 'deviceId'],\n        }),\n        disconnected: Event({\n          name: ['Device', 'Disconnected'],\n          requiredContext: ['roomId', 'episodeId', 'deviceId'],\n        }),\n      },\n\n      room: {\n        created: Event({\n          name: ['Room', 'Created'],\n          requiredContext: ['roomId', 'episodeId', ...userInfo],\n        }),\n        exited: Event({\n          name: ['Room', 'Exited'],\n          requiredContext: ['roomId', 'episodeId', ...userInfo],\n        }),\n        backToAllEpisodes: Event({\n          name: ['Room', 'Back to All Episodes'],\n          requiredContext: ['roomId', 'episodeId', ...userInfo],\n        }),\n        joined: Event({\n          name: ['Room', 'Joined'],\n          requiredContext: ['roomId', 'episodeId', 'deviceId', 'playerId'],\n          optionalContext: ['playerAge'],\n        }),\n        episodeStarted: Event({\n          name: ['Room', 'Episode Started'],\n          requiredContext: ['roomId', 'episodeId', ...userInfo],\n        }),\n        episodeCompleted: Event({\n          name: ['Room', 'Episode Completed'],\n          requiredContext: ['roomId', 'episodeId', ...userInfo],\n        }),\n      },\n\n      scene: {\n        started: Event({\n          name: ['Scene', 'Started'],\n          requiredContext: ['sceneId', 'roomId', 'episodeId', ...userInfo],\n        }),\n        completed: Event({\n          name: ['Scene', 'Completed'],\n          requiredContext: ['sceneId', 'roomId', 'episodeId', ...userInfo],\n        }),\n        skipped: Event({\n          name: ['Scene', 'Skipped'],\n          requiredContext: ['sceneId', 'roomId', 'episodeId', ...userInfo],\n        }),\n\n        video: {\n          segmentStarted: Event({\n            name: ['Scene', 'Video', 'Segment Started'],\n            requiredContext: [\n              'roomId',\n              'episodeId',\n              'sceneId',\n              'videoId',\n              'timestamp',\n              ...userInfo,\n            ],\n          }),\n          segmentCompleted: Event({\n            name: ['Scene', 'Video', 'Segment Completed'],\n            requiredContext: [\n              'roomId',\n              'episodeId',\n              'sceneId',\n              'videoId',\n              'timestamp',\n              ...userInfo,\n            ],\n          }),\n          autoplayPrevented: Event({\n            name: ['Scene', 'Video', 'Autoplay Prevented'],\n            requiredContext: ['roomId', 'episodeId', 'sceneId', 'videoId'],\n          }),\n          paused: Event({\n            name: ['Scene', 'Video', 'Paused'],\n            requiredContext: [\n              'roomId',\n              'episodeId',\n              'sceneId',\n              'videoId',\n              'timestamp',\n            ],\n          }),\n          resumed: Event({\n            name: ['Scene', 'Video', 'Resumed'],\n            requiredContext: [\n              'roomId',\n              'episodeId',\n              'sceneId',\n              'sceneIndex',\n              'scenesRemaining',\n              'sceneProgress',\n              'videoId',\n              'timestamp',\n            ],\n          }),\n          looped: Event({\n            name: ['Scene', 'Video', 'Looped'],\n            requiredContext: ['roomId', 'episodeId', 'sceneId', 'videoId'],\n          }),\n        },\n\n        prompt: {\n          answered: Event({\n            name: ['Scene', 'Prompt', 'Answered'],\n            requiredContext: [\n              'roomId',\n              'episodeId',\n              'sceneId',\n              'answer',\n              'playerId',\n              'deviceId',\n              'asGroup',\n            ],\n          }),\n        },\n\n        multipleChoice: {\n          answered: Event({\n            name: ['Scene', 'Multiple Choice', 'Answered'],\n            requiredContext: [\n              'roomId',\n              'episodeId',\n              'sceneId',\n              'answer',\n              'playerId',\n              'deviceId',\n              'asGroup',\n            ],\n          }),\n        },\n\n        buttonPrompt: {\n          pressed: Event({\n            name: ['Scene', 'Button Prompt', 'Pressed'],\n            requiredContext: [\n              'roomId',\n              'episodeId',\n              'sceneId',\n              'playerId',\n              'deviceId',\n              'asGroup',\n            ],\n          }),\n        },\n\n        timer: {\n          started: Event({\n            name: ['Scene', 'Timer', 'Started'],\n            requiredContext: ['roomId', 'episodeId', 'sceneId'],\n          }),\n          ended: Event({\n            name: ['Scene', 'Timer', 'Ended'],\n            requiredContext: ['roomId', 'episodeId', 'sceneId'],\n          }),\n        },\n      },\n    },\n  };\n};\n","import { AnalyticsProvider } from '../provider';\nimport { EventContext, PageViewContext } from '../context';\n\nexport default function createTagManagerProvider(\n  dataLayer: any[] = []\n): AnalyticsProvider {\n  return {\n    trackEvent: (eventType: string | string[], context: EventContext = {}) => {\n      dataLayer.push({\n        event: joinName(eventType),\n        ...context,\n      });\n    },\n\n    trackPageView: (\n      pageCategory: string | string[],\n      context: PageViewContext = {}\n    ) => {\n      dataLayer.push({\n        pageCategory: joinName(pageCategory),\n        ...context,\n      });\n    },\n  };\n}\n\nexport const joinName = (parts: string | string[]) => {\n  return [parts].flat().join(' / ');\n};\n","import { AnalyticsProvider } from '../provider';\nimport { EventContext, PageViewContext } from '../context';\n\ninterface SegmentContext extends EventContext {\n  email?: string;\n  acValue: string;\n}\n\nconst JOIN_STR = ' _ ';\n\nexport interface Segment extends Array<any> {\n  identify: (\n    userId: string,\n    traits: {\n      [key: string]: any;\n    }\n  ) => void;\n\n  page: (\n    category: string,\n    name: string | null,\n    properties?: PageViewContext\n  ) => void;\n\n  track: (event: string, context: EventContext) => void;\n}\n\nexport const computeContext = (context: EventContext): SegmentContext => {\n  const withEmail = {\n    ...context,\n    email: context.userEmail,\n  };\n\n  return {\n    ...withEmail,\n    acValue: JSON.stringify(withEmail),\n  };\n};\n\nexport default function createSegmentProvider(\n  segment: Segment\n): AnalyticsProvider {\n  let didIdentifyUser = false;\n\n  return {\n    trackEvent: (eventType, context = {}) => {\n      if (context.userId && !didIdentifyUser) {\n        segment.identify(context.userId, {\n          email: context.userEmail,\n          name: context.userName,\n        });\n\n        didIdentifyUser = true;\n      }\n\n      segment.track([eventType].flat().join(JOIN_STR), computeContext(context));\n    },\n\n    trackPageView: (parts, context = {}) => {\n      const partsArr = [parts].flat();\n\n      segment.page(\n        partsArr.slice(0, -1).join(JOIN_STR),\n        partsArr.slice().pop() as string,\n        computeContext(context)\n      );\n    },\n  };\n}\n","import { createAppAnalyticsRecorder } from './recorders/app';\nimport createTagManagerProvider from './providers/tag-manager';\nimport createSegmentProvider, { Segment } from './providers/segment';\n\nexport const createTagManagerRecorder = (dataLayer: any[]) => {\n  const gtm = createTagManagerProvider(dataLayer);\n\n  return {\n    app: createAppAnalyticsRecorder(gtm),\n  };\n};\n\nexport const createSegmentRecorder = (segment: Segment) => {\n  return {\n    app: createAppAnalyticsRecorder(createSegmentProvider(segment)),\n  };\n};\n\nexport { createTagManagerProvider, createSegmentProvider };\n"],"names":["createRecorderMethodFactory","options","prefix","track","stickyContext","options2","name","requiredContext","optionalContext","prefixedName","flat","Object","assign","newContext","context","requiredKeys","optionalKeys","mergedContext","forEach","key","value","Error","mergeContext","recordingName","userInfo","createAppAnalyticsRecorder","provider","Page","Event","saveContext","trackPageView","trackEvent","sticky","createRecorderHelpers","pages","home","auth","payment","events","signedUp","loggedIn","loggedOut","canceled","required","completed","episode","detailsViewed","device","connected","disconnected","room","created","exited","backToAllEpisodes","joined","episodeStarted","episodeCompleted","scene","started","skipped","video","segmentStarted","segmentCompleted","autoplayPrevented","paused","resumed","looped","prompt","answered","multipleChoice","buttonPrompt","pressed","timer","ended","dataLayer","eventType","push","__spreadValues","event","joinName","pageCategory","parts","join","computeContext","withEmail","__spreadProps","email","userEmail","acValue","JSON","stringify","segment","didIdentifyUser","userId","identify","userName","partsArr","page","slice","pop","createTagManagerRecorder","gtm","createTagManagerProvider","app","createSegmentRecorder","createSegmentProvider"],"mappings":"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"}